(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.ThemeSwitcher = factory());
}(this, (function () { 'use strict';

  // using in client
  var isBrowser = function isBrowser() {
    return typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';
  };

  /**
   * const themeSwitcher = ThemeSwitcher({
   *   id: 'theme-style',
   *   storageKey: 'site-theme',
   * });
   *
   * @param config
   */

  var themeSwitcher = function themeSwitcher(config) {
    var _ref = config || {},
        _ref$id = _ref.id,
        id = _ref$id === void 0 ? 'theme-style' : _ref$id,
        _ref$prefetchId = _ref.prefetchId,
        prefetchId = _ref$prefetchId === void 0 ? 'theme-prefetch' : _ref$prefetchId,
        _ref$storageKey = _ref.storageKey,
        storageKey = _ref$storageKey === void 0 ? 'site-theme' : _ref$storageKey,
        _ref$attr = _ref.attr,
        attr = _ref$attr === void 0 ? 'data-theme' : _ref$attr,
        themeMap = _ref.themeMap;

    if (!themeMap) {
      throw new Error('ThemeSwitcher need themeMap like: { dark: "/dark.css" }');
    } // support SSR


    if (!isBrowser()) {
      // @ts-ignore
      return function () {};
    } // prefetch link css


    var themes = Object.keys(themeMap);
    themes.forEach(function (theme) {
      var themeAssetId = "".concat(prefetchId, "-").concat(theme);

      if (!document.getElementById(themeAssetId)) {
        // add prefetch
        var stylePrefetch = document.createElement('link');
        stylePrefetch.rel = 'prefetch';
        stylePrefetch.type = 'text/css';
        stylePrefetch.id = themeAssetId;
        stylePrefetch.href = themeMap[theme];
        document.head.append(stylePrefetch);
      }
    }); // TODO: use global

    var getTheme = function getTheme() {
      return localStorage.getItem(storageKey);
    };

    var switcher = function switcher(switchConfig) {
      var theme = switchConfig.theme,
          _switchConfig$useStor = switchConfig.useStorage,
          useStorage = _switchConfig$useStor === void 0 ? true : _switchConfig$useStor;
      var dom = document.getElementById(id);

      if (dom) {
        dom.remove();
      }

      if (useStorage) {
        localStorage.removeItem(storageKey);
        localStorage.setItem(storageKey, theme);
      }

      if (themeMap[theme]) {
        var style = document.createElement('link');
        style.type = 'text/css';
        style.rel = 'stylesheet';
        style.id = id;
        style.href = themeMap[theme];
        document.body.append(style);
      }

      document.body.setAttribute(attr, theme);
    };

    return {
      switcher: switcher,
      getTheme: getTheme
    };
  };

  return themeSwitcher;

})));
